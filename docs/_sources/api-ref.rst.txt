=============
API Reference
=============

In this section we describe relevant classes and methods of the :code:`quantagonia` package.



Submitting tasks
================
The heart of the package is a :class:`HybridSolver` class to conveniently submit optimization tasks and batches of tasks.

.. autoclass:: quantagonia.HybridSolver
    :members:



Solver Parameters
=================

You can parameterize the HybridSolver by passing a :class:`HybridSolverParameters` object. Parameters are set through dedicated setter methods.

.. autoclass:: quantagonia.HybridSolverParameters
    :members:
    :exclude-members: to_dict, to_str



Modeling MIPs
=============
The :code:`quantagonia` package contains a :class:`HybridSolver_CMD` command, which can be passed to `PuLP <https://coin-or.github.io/pulp/index.html>`_'s :code:`solve` method. This allows to model problems with PuLP and solve them with the HybridSolver. After the solve, you can access solution values directly from the PuLP model.

.. autoclass:: quantagonia.mip.pulp_adapter.HybridSolver_CMD



Modeling QUBOs
==============
The :code:`quantagonia` package comes with a :class:`QuboModel` class to model and solve QUBOs programmatically. Have a look at our :ref:`qubo-format` to learn more. You can also retrieve solution values of variables to process and use the optimal solution in your application.

.. autoclass:: quantagonia.qubo.model.QuboModel
    :members:
