==========================
QUBO Solver Specifications
==========================

.. toctree::
    :maxdepth: 1
    :caption: Contents:
    :glob:

Some solver options are useful to guide the solver behavior. For convenience, the most relevant options are exposed via the spec builder. You first set up the specs  :

.. code-block::

    from quantagonia.spec_builder import QUBOSpecBuilder
    spec = QUBOSpecBuilder()

Termination Settings
====================

Several options allows you to control the termination of the solver.

Time limit
----------
We can set a time limit to interupt the solver after the given time and return the best found solution along with the optimality gap. The optimality gap tells you how much more potential there could be in the optimization process. Note that with ordinary quantum annealers you only retrieve a solution without knowing how far it might be away from an optimal solution.

.. code-block::

    time_limit = 10 # seconds
    spec.set_time_limit(time_limit)

Max number of nodes
--------------------
Limit the number of branch and bound nodes to be explored. Setting this number to 1 only solves the root node. This mimicks the behavior of ordinary (quantum) annealers which "only" return a solution without any quality assessment or proof of global optimality. When comparing to other quantum annealers, make sure to limit the number of nodes to 1.If the solution process is stopped after the maximum number of nodes is reached, our solver still returns an optimality gap which tells you how far away the true optimal solution potentially is. This is not the case with other ordinary (quantum) annealers.

.. code-block::

    num_nodes = 1
    spec.set_max_num_nodes(num_nodes)

Absolute gap
-------------
The solver terminates once the absolute gap reaches a default tolerance of 1e-9. The absolute gap is the difference between the objective value :math:`f∗` of the best solution found and the best bound :math:`fˉ​` on the objective value. Hence, the absolute gap tells you how much more the objective value could potentially increase if you continue the search. The tolerance for the absolute gap termination can be adjusted as follows:

.. code-block::

    abs_gap = 1e-6
    spec.set_absolute_gap(abs_gap)

Relative gap
-------------
The solver terminates once the relative gap reaches the default tolerance of 0.01% or 1e-4. The relative gap is defined as
:math:`|f^\ast - \bar{f}|\, /\,  |f^\ast|`,
i.e., it is the improvement potential relative to the best-known objective value.The tolerance for the relative gap termination can be adjusted as follows:

.. code-block::

    rel_gap = 1e-2
    spec.set_relative_gap(rel_gap)

Presolve settings
=================
Before the actual solve, our solver performs various presolving routines on the full QUBO problem, e.g., fixing variables due to optimality arguments, deriving implications, etc., by default. You can control presolving with the following options.

Presolve
--------

You can enable or disable presolve in general:

.. code-block::

    spec.set_presolve(False)

Coefficient strenghtening
-------------------------
Instead of enabling or disabling the full presolve, you can also control only some components of it. For example, you can enable coefficient strengthening, which is disabled by default:

.. code-block::

    spec.set_coeff_strengthening(True)

.. code-block::

    UserWarning: Setting parameter coeff_strengthening to True has no effect, because presolve is disabled. Enable presolve by using set_presolve(True).

Node presolve
--------------
Similar to the presolve on the full QUBO problem, our solver also performs some presolve routines for each sub-QUBO derived during the solution process. This behavior can be turned off:

.. code-block::

    spec.set_node_presolve(False)

Solution strategy
=================
Usually, the default settings for the search strategy work just fine. However, for some instances, it may be beneficial to adjust the search strategy through the following options.

Enumeration
-----------
During the solution process, our solver solves many smaller sub-QUBOs. If these sub-QUBOs are small enough, we explicitly enumerate the solution space of the sub-QUBO, because this can be done extremely fast for small sub-QUBOs. This behavior may be turned off:

.. code-block::

    spec.set_enumeration(False)