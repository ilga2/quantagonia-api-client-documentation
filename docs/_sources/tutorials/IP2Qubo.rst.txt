.. _mip_label:

===================================================================
Solving IP and Conversion to QUBO
===================================================================

.. toctree::
    :maxdepth: 1
    :caption: Contents:
    :glob:

Creating a MIP
================

For modeling MIP problems `PulP <https://coin-or.github.io/pulp/>`_ is supported and instances can be modeled and solved.
It is possible to convert problems to QUBO, even though modeling and solving a problem as QUBO directly is more efficient.

Note that the usage of MIP problems is limited to integer and binary variables.

This is an example of creating a knapsack MIP problem instance with PulP. It is converted to QUBO and submitted for solving:

.. literalinclude:: ../examples/ip2qubo_knapsack.py
    :lines: 1-6, 9-25


Solving as MIP
======================

The :class:`QPuLPAdapter` offers a function to submit IP problems to the cloud and solve as such:

.. literalinclude:: ../examples/ip2qubo_knapsack.py
    :lines: 7-8, 32-41

Alternatively MIP problems can be submitted as file, or sets of files, as described in :ref:`submit_files_label`.

Solving MIP as QUBO
======================

There are two solvers that convert an IP and then solve as a QUBO problem, the :class:`AutomaticPenaltyScalingIPviaQUBOSolver` and the :class:`OneShotIPviaQUBOSolver`.

Use either AutomaticPenaltyScalingIPviaQUBOSolver:

.. literalinclude:: ../examples/ip2qubo_knapsack.py
    :lines: 49-51

or OneShotIPviaQUBOSolver:

.. literalinclude:: ../examples/ip2qubo_subset_sum.py
    :lines: 46-47

Then submit for solving:

.. literalinclude:: ../examples/ip2qubo_subset_sum.py
    :lines: 48-57



